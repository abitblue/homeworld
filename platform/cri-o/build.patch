diff --git a/BUILD.bazel b/BUILD.bazel
new file mode 100644
index 0000000..bf0a685
--- /dev/null
+++ b/BUILD.bazel
@@ -0,0 +1,15 @@
+exports_files([
+    "seccomp.json",
+    "crio-umount.conf",
+    "crictl.yaml",
+    "contrib/systemd/crio.service",
+    "contrib/systemd/crio-shutdown.service",
+])
+
+genrule(
+    name = "crio.conf-genrule",
+    outs = [":crio.conf"],
+    tools = ["//cmd/crio"],
+    cmd = "\"$(location //cmd/crio)\" --root=\"/nonexistent\" --runroot \"/nonexistent\" --storage-driver=\"\" --config=\"\" config >\"$@\"",
+    visibility = ["//visibility:public"],
+)
diff --git a/conmon/BUILD.bazel b/conmon/BUILD.bazel
new file mode 100644
index 0000000..9b97598
--- /dev/null
+++ b/conmon/BUILD.bazel
@@ -0,0 +1,46 @@
+# TODO: include -std=c99 in C builds
+
+genrule(
+    name = "config.h-genrule",
+    outs = [":conf/config.h"],
+    tools = ["//cmd/crio-config"],
+    cmd = """
+        REL="$$(realpath "$(location //cmd/crio-config)")"
+        cd \"$(@D)\"
+        "$${REL}"
+    """,
+)
+
+cc_library(
+    name = "glibinc",
+    hdrs = [":glibobject-include/glibconfig.h"],
+    includes = ["glibobject-include"],
+    linkopts = ["-lglib-2.0"],
+)
+
+cc_library(
+    name = "configinc",
+    hdrs = [":conf/config.h"],
+    includes = ["conf"],
+)
+
+cc_binary(
+    name = "conmon",
+    srcs = [
+        ":conmon.c",
+        ":cmsg.c",
+        ":cmsg.h",
+        ":utils.c",
+        ":utils.h",
+        ":ctr_logging.c",
+        ":ctr_logging.h",
+    ],
+    # TODO: get these dynamically, not statically
+    defines = [
+        "VERSION='\"1.10.7-dev\"'",
+        "GIT_COMMIT='\"210d46c717c5dcb6d11302723eb9d20575ee7a78\"'",
+    ],
+    deps = [":glibinc", ":configinc"],
+    copts = ["-I/usr/include/glib-2.0"],
+    visibility = ["//visibility:public"],
+)
diff --git a/conmon/glibobject-include b/conmon/glibobject-include
new file mode 120000
index 0000000..3638b19
--- /dev/null
+++ b/conmon/glibobject-include
@@ -0,0 +1 @@
+/usr/lib/x86_64-linux-gnu/glib-2.0/include
\ No newline at end of file
diff --git a/vendor/github.com/containers/storage/pkg/devicemapper/BUILD.bazel b/vendor/github.com/containers/storage/pkg/devicemapper/BUILD.bazel
index bd64ed0..a12b9f5 100644
--- a/vendor/github.com/containers/storage/pkg/devicemapper/BUILD.bazel
+++ b/vendor/github.com/containers/storage/pkg/devicemapper/BUILD.bazel
@@ -12,6 +12,7 @@ go_library(
         "log.go",
     ],
     cgo = True,
+    clinkopts = ["-ldevmapper"],
     importmap = "github.com/cri-o/cri-o/vendor/github.com/containers/storage/pkg/devicemapper",
     importpath = "github.com/containers/storage/pkg/devicemapper",
     visibility = ["//visibility:public"],
diff --git a/vendor/github.com/seccomp/libseccomp-golang/BUILD.bazel b/vendor/github.com/seccomp/libseccomp-golang/BUILD.bazel
index 3a0a989..9e0efbe 100644
--- a/vendor/github.com/seccomp/libseccomp-golang/BUILD.bazel
+++ b/vendor/github.com/seccomp/libseccomp-golang/BUILD.bazel
@@ -7,6 +7,7 @@ go_library(
         "seccomp_internal.go",
     ],
     cgo = True,
+    clinkopts = ["-lseccomp"],
     importmap = "github.com/cri-o/cri-o/vendor/github.com/seccomp/libseccomp-golang",
     importpath = "github.com/seccomp/libseccomp-golang",
     visibility = ["//visibility:public"],
--- a/vendor/k8s.io/apimachinery/pkg/util/sets/BUILD	2019-09-29 15:55:01.213000000 -0400
+++ b/vendor/k8s.io/apimachinery/pkg/util/sets/BUILD	2019-09-29 15:36:54.915000000 -0400
@@ -1,6 +1,5 @@
 package(default_visibility = ["//visibility:public"])
 
-load("@io_k8s_repo_infra//defs:go.bzl", "go_genrule")
 load(
     "@io_bazel_rules_go//go:def.bzl",
     "go_library",
@@ -19,35 +13,6 @@
     importmap = "github.com/cri-o/cri-o/vendor/k8s.io/apimachinery/pkg/util/sets",
     importpath = "k8s.io/apimachinery/pkg/util/sets",
 )
-
-# This rule makes all sorts of terrible assumptions that it's running inside k8s.io/kubernetes, even though it's part of k8s.io/apimachinery. :\
-go_genrule(
-    name = "set-gen",
-    srcs = [
-        "//hack/boilerplate:boilerplate.generatego.txt",
-    ],
-    outs = [
-        "byte.go",
-        "doc.go",
-        "empty.go",
-        "int.go",
-        "int64.go",
-        "string.go",
-    ],
-    cmd = """
-$(location //vendor/k8s.io/code-generator/cmd/set-gen) \
-    --input-dirs k8s.io/kubernetes/vendor/k8s.io/apimachinery/pkg/util/sets/types \
-    --output-base $$(dirname $$(dirname $(location :byte.go))) \
-    --go-header-file $(location //hack/boilerplate:boilerplate.generatego.txt) \
-    --output-package sets
-    """,
-    go_deps = [
-        "//staging/src/k8s.io/apimachinery/pkg/util/sets/types:go_default_library",
-    ],
-    tools = [
-        "//vendor/k8s.io/code-generator/cmd/set-gen",
-    ],
-)
 
 filegroup(
     name = "package-srcs",

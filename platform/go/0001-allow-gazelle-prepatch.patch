--- internal/go_repository.bzl	2020-05-07 23:06:38.193129800 -0400
+++ internal/go_repository.bzl	2020-05-07 23:06:17.216244104 -0400
@@ -127,6 +127,9 @@
         if result.stderr:
             print("fetch_repo: " + result.stderr)
 
+    # Apply pre-patches if necessary.
+    patch(ctx, False)
+
     # Repositories are fetched. Determine if build file generation is needed.
     build_file_names = ctx.attr.build_file_name.split(",")
     existing_build_file = ""
@@ -183,8 +186,8 @@
         if result.stderr:
             print("%s: %s" % (ctx.name, result.stderr))
 
-    # Apply patches if necessary.
-    patch(ctx)
+    # Apply post-patches if necessary.
+    patch(ctx, True)
 
 go_repository = repository_rule(
     implementation = _go_repository_impl,
@@ -250,6 +253,12 @@
         "build_config": attr.label(default= "@bazel_gazelle_go_repository_config//:WORKSPACE"),
         "build_directives": attr.string_list(default = []),
 
+        # Patches to apply before running gazelle.
+        "prepatches": attr.label_list(),
+        "prepatch_tool": attr.string(default = "patch"),
+        "prepatch_args": attr.string_list(default = ["-p0"]),
+        "prepatch_cmds": attr.string_list(default = []),
+
         # Patches to apply after running gazelle.
         "patches": attr.label_list(),
         "patch_tool": attr.string(default = "patch"),
@@ -260,23 +269,27 @@
 """See repository.rst#go-repository for full documentation."""
 
 # Copied from @bazel_tools//tools/build_defs/repo:utils.bzl
-def patch(ctx):
+def patch(ctx, post):
     """Implementation of patching an already extracted repository"""
     bash_exe = ctx.os.environ["BAZEL_SH"] if "BAZEL_SH" in ctx.os.environ else "bash"
-    for patchfile in ctx.attr.patches:
+    if post:
+        patches, patch_tool, patch_args, patch_cmds = ctx.attr.patches, ctx.attr.patch_tool, ctx.attr.patch_args, ctx.attr.patch_cmds
+    else:
+        patches, patch_tool, patch_args, patch_cmds = ctx.attr.prepatches, ctx.attr.prepatch_tool, ctx.attr.prepatch_args, ctx.attr.prepatch_cmds
+    for patchfile in patches:
         command = "{patchtool} {patch_args} < {patchfile}".format(
-            patchtool = ctx.attr.patch_tool,
+            patchtool = patch_tool,
             patchfile = ctx.path(patchfile),
             patch_args = " ".join([
                 "'%s'" % arg
-                for arg in ctx.attr.patch_args
+                for arg in patch_args
             ]),
         )
         st = ctx.execute([bash_exe, "-c", command])
         if st.return_code:
             fail("Error applying patch %s:\n%s%s" %
                  (str(patchfile), st.stderr, st.stdout))
-    for cmd in ctx.attr.patch_cmds:
+    for cmd in patch_cmds:
         st = ctx.execute([bash_exe, "-c", cmd])
         if st.return_code:
             fail("Error applying patch command %s:\n%s%s" %
